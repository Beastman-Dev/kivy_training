Topics for course:
* Intro to Kivy
* Installing Kivy
* Running a simple Kivy program
* Sizing and positioning elements

What is Kivy?
* Python library used to build apps
* Excellent for rapidly building a complex UIs
* Written mostly in Python
* Open source
* Cross platform (desktop and mobile)
* GPU accelerated

Why Kivy?
* Can build apps for desktop and mobile
* Very easy to build flexible and powerful UIs
* Widely used so lots of help available
* Free to use
* Easy to install and setup

How does Kivy work?
* Layout and widget building system
* Most elements are widgets
* Organize widgets with layouts
* Most UI building done in .kv files
* Most app logic handled in .py files
* Use variables in .kv files to keep track of state (updated automatically) through properties

How will tutorials work?
* Many options for layouts and widgets
* Explore a few core layouts and widget
* Build layouts and widgets with .kv and .py files
* Most of the logic geared towards building our app
* Likely many ways of building the same app
* Only focus on building desktop apps

Install Kivy
* sudo apt install python3-kivy
* Current version of Kivy: 2.3.1
* Supported Python versions: 3.8 - 3.13
* Version of Python I'm currently using: 3.12.3

Tasks:
* Start new Kivy project
* Create .py and .kv files
* Add a custom widget
* Run the project

Start new Kivy project
* Create main python file
* Import App class and at least one widget class from Kivy library
* Create main class with app name as subclass of "App" Kivy class
* Override build function in app class to include any widgets needed
* Create kivy file with same name as class created in main python file
* First line of kivy file should be "#:kivy 2.3.1" where "2.3.1" is the version of Kivy being used

Sizing and Positioning, part 1:
* Add widgets through .py file#:kivy 2.3.1
* Use pos to position widgets
* Use size and size_hint to resize widgets
* Positions start at bottom left (0,0)
* pos=(x,y) positions the child widget within the parent
* size=(x,y) sets a static size for the widget
* size_hint(x,y) sets a size for the widget relative to it's parent as a decimal (0.5 = 50%)
* If static size is used, set size_hint=(None,None)

Sizing and Positioning Part 2:
* Create a custom widget
* Pass in a size and position
* Set a default size and position

Sizing and Positioning Part 3:
* Link our custom widget to .kv file
* Use canvas to specify pos and size
* Use self to get current pos and size
* Use root to get parent pos and size

Sizing and Positioning Part 3 Notes:
* kv files use <> for class references
* kv files use tabs and colons with no equals or parentheses
  * Example: 'size: 50, 50' instead of size=(50, 50)
* You can add properties to a class (example: rectangle)
  * Those properties can reference the parent class using self. (example: self.x)
* You can create child objects with their own properties
  * Parent properties can be referenced using root. (example: root.x)

Sizing and Positioning Part 4:
* Explore FloatLayout
* Use pos_hint
* Compare pos_hint to pos

Sizing and Positioning Part 5:
* Explore GridLayout
* Populate the grid with buttons

<GameScreen>:

    FloatLayout:
        pos: 0, 0
        size: root.width, root.height
        
        GridLayout:
            cols: 2
            pos_hint: {'x': .3, 'y': .3}
            size_hint: None, None
            size: root.width * .4, root.width * .4

            Button:
                text: "Button 1"
            Button:
                text: "Button 2"
            Button:
                text: "Button 3"
            Button:
                text: "Button 4"

Displaying Text:
* Explore Label widget
* Customize Label

<GameScreen>:

    FloatLayout:
        pos: 0, 0
        size: root.width, root.height
        
        Label:
            text: 'Here is some text in a label'
            pos_hint: {'x': .1, 'y': .8}
            size_hint: .8, .1
            halign: 'left'
            text_size: self.size
            font_size: 24
            bold: True
            color: 0, 1, 0, 1

class LanguageLearnerApp(App):
    def build(self):
        game_screen = GameScreen()
        game_screen.add_widget(
            Label(text="Welcome to Language Learner!")
        )
        return game_screen

Displaying Imags:
* Import images into our project
* Explore Image and BorderImage
* Display an images
* Customize the images

BorderImage:

<GameScreen>:
    canvas:
        BorderImage:
            source: 'images/bote.png'
            pos: 300, 300
            size: 300, 300

* If you want an image as a background, use BorderImage
* If you want an image displayed as a separate object/widget, decoupled from the root, use Image

